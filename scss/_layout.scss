/*
    .container ratios
    small: 100% with (0 2.5% padding)
    medium-to-large: 85%
    larger: 80%
    .container.full-screen: 100%
*/
@mixin border-box() {
    @if(not $include-utility-classes) {
        @extend %border-box;
    }
}
.container, .flex-sys.container {
    display: block;
    margin: 0 auto;
    max-width: 100%;
    @include border-box();
    //liquid container
    &:not(.fixed-width) &:not(.fixed-width) {
        width: 100% !important;
    }
    @include on(small) {
        &:not(.onsmall-full-width) {
            padding: 0 2.5%;
        }
        .container, .column & {
            width: 100%;
        }
    }
    @include on(medium-to-large) {
        &:not(.onmedium-full-screen) {
            width: 85%;
        }
    }
    @include on(large) {
        &:not(.onlarge-full-screen) {
            width: 80%;
        }
    }
    @include on(larger) {
        &:not(.onlarger-full-screen) {
            width: 80%;
        }
        &.onlarger-full-screen {
            width: 100% !important;
        }
    }
    //fixed-width container
    &.fixed-width {
        &:not(.liquid-onmedium):not(.onmedium-full-screen) {
            @include on(medium-to-large) {
                width: (85/100) * $medium;
            }
            @include on(768px, to, $large) {
                width: (80/100) * 768px;
            }
        }
        @each $range, $value in (large: $large, larger: $larger, 1440px: 1440px, 1600px: 1600px)
        {
            @if($range == large) {
                @include on(large-to-larger) {
                    &:not(.liquid-onlarge):not(.onlarge-full-screen) {
                        width: (80/100) * $value;
                    }
                }
            }
            @else {
                @include on($range) {
                    &:not(.liquid-onlarger):not(.onlarger-full-screen) {
                        width: (80/100) * $value;
                    }
                }
            }
        }
    }
    //.sp-right-0, .sp-left-0
    @include on(large) {
        &.sp-right-0 {
            margin-right: 0;
        }
        &.sp-left-0 {
            margin-left: 0;
        }
    }
}
/*
    .remaining the remaining space after .container class
    .remainder-width = 100% - container-width
*/
@if($include-remaining) {
    .remaining {
        @include border-box();
        max-width: 100%;
        width: fit-content;
        @include on(large) {
            width: 100% - 80;
        }
        &.fixed-width {
            @each $range, $value in (large: $large, larger: $larger, 1440px: 1440px, 1600px: 1600px)
            {
                @if($range == large) {
                    @include on(large-to-larger) {
                        &:not(.liquid-onlarge) {
                            width: calc(100% - #{(80/100) * $value});
                        }
                    }
                }
                @else {
                    @include on($range) {
                        &:not(.liquid-onlarger) {
                            width: calc(100% - #{(80/100) * $value});
                        }
                    }
                }
            }
        }
    }
}
/*
    .flex-row, .row-reversed (main or row)-aixs parent
    .flex-column, .column-reversed cross-axis parent
*/
.flex-row, .flex-column, .row-reversed, .column-reversed {
    &:not(.none):not(.inline-flex) {
        display: flex !important;
    }
    &.inline-flex:not(.none) {
        display: inline-flex !important;
    }
    &:not(.default-column):not(.stretch):not([class*=cross-]) {
        align-items: flex-start;
    }
    &, & > * {
        @include border-box();
    }
    &.noshrink-each > *, .noshrink {
        flex-shrink: 0;
    }
}
/*.*row* classes will wrap by default*/
[class*=row] {
    flex-wrap: wrap;
    & > *:not(.container):not(.flex-sys.container):not(.full-width) {
        width: auto;
    }
}
/*wrapping behavior*/
.wrap-reversed {
    flex-wrap: wrap-reverse;
}
.nowrap {
    flex-wrap: nowrap;
}
/*wrap within a breakpoint range*/
@include each-range(wrap, false, false) {
    flex-wrap: wrap;
}
/*wrap starting from a breakpoint*/
@include on(medium) {
    .from-medium-wrap {
        flex-wrap: wrap;
    }
}
@include on(large) {
    .from-large-wrap {
        flex-wrap: wrap;
    }
}
/*row in reversed order*/
.row-reversed {
    flex-flow: row-reverse;
}
/*column in reversed order*/
.column-reversed {
    flex-flow: column-reverse;
}
/*specifiying that the height of a .column* items should be set using the flex property*/
[class*=column]:not(.default-column) {
    & > *:not([class*=full-height]) {
        height: auto;
    }
}
/*cross-axis container*/
.flex-column {
    flex-flow: column;
}
/*main-axis container starting from a brekpoint*/
@include on(small) {
    .row-onsmall {
        flex-flow: row;
    }
}
@include on(medium) {
    .row-onmedium {
        flex-flow: row;
    }
}
@include on(large) {
    .row-onlarge {
        flex-flow: row;
    }
}
@include on(larger) {
    .row-onlarger {
        flex-flow: row;
    }
}
/*cross-axis container within starting from a breakpoint*/
@include on(small) {
    .column-onsmall {
        flex-flow: column;
    }
}
@include on(medium) {
    .column-onmedium {
        flex-flow: column;
    }
}
@include on(large) {
    .column-onlarge {
        flex-flow: column;
    }
}
@include on(larger) {
    .column-onlarger {
        flex-flow: column;
    }
}